#!/bin/sh

BUILD_DIR=$1
CACHE_DIR=$2
METEOR_HOME=$BUILD_DIR/.meteor/local
PATH=$METEOR_HOME/usr/bin:$METEOR_HOME/usr/lib/meteor/bin:$PATH

function mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

# vendor directories
VENDORED_NODE="$(mktmpdir node)"
VENDORED_NPM="$(mktmpdir npm)"

function run_npm() {
  command="$1"

  cd $BUILD_DIR
  HOME="$BUILD_DIR" $VENDORED_NODE/bin/node $VENDORED_NPM/cli.js $command 2>&1

  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to $command dependencies with npm"
    exit 1
  fi
}

fetch_meteor() {
  if [ -f "$METEOR_HOME/usr/bin/meteor" ] ; then
    # Skip if meteor is already fetched
    return
  fi

  eval $(curl install.meteor.com | grep '^VERSION=')
  PACKAGE=meteor_${VERSION}-1_amd64.deb

  echo "Fetching meteor deb package"
  curl -o "$CACHE_DIR/$PACKAGE" "http://d3sqy0vbqsdhku.cloudfront.net/${PACKAGE}"

  echo "Unpacking meteor"
  [ ! -d "$METEOR_HOME" ] && mkdir -p "$METEOR_HOME"
  ar p "$CACHE_DIR/$PACKAGE" data.tar.gz | tar -C "$METEOR_HOME" -zxf -
}

build() {
  ( 
    cd $BUILD_DIR
    echo "Building meteor bundle"
    meteor bundle $CACHE_DIR/bundle.tar.gz 
    mkdir -p $BUILD_DIR/.meteor/local/build
    tar -zxf $CACHE_DIR/bundle.tar.gz --strip-components 1 -C $BUILD_DIR/.meteor/local/build
    rm $CACHE_DIR/bundle.tar.gz
  )
}

[ ! -d $BUILD_DIR ] && mkdir $BUILD_DIR
[ ! -d $CACHE_DIR ] && mkdir $CACHE_DIR

fetch_meteor
build

# install dependencies with npm
echo "-----> Installing dependencies with npm"
run_npm "install --production"
run_npm "rebuild"
echo "       Dependencies installed"